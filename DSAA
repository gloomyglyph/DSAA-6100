{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "6c0f6c26",
   "metadata": {
    "papermill": {
     "duration": 0.012366,
     "end_time": "2024-11-05T11:03:51.226750",
     "exception": false,
     "start_time": "2024-11-05T11:03:51.214384",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Fine-Tuning Large Language Models with LoRA on Kaggle\r\n",
    "\r\n",
    "In this notebook, we explore how to fine-tune a large language model (MT5) with a technique called Low-Rank Adaptation (LoRA). LoRA allows us to adapt large models without modifying all parameters, making it efficient and feasible for resource-constrained environments. This is especially useful on platforms like Kaggle where GPU and memory resources may be limited.\r\n",
    "\r\n",
    "**Objectives:**\r\n",
    "- Load and configure an MT5 model and tokenizer.\r\n",
    "- Preprocess data for training.\r\n",
    "- Apply LoRA for efficient fine-tuning.\r\n",
    "- Train, evaluate, and analyze the model's performance.\r\n",
    "\r\n",
    "Let's dive in!\r\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f7166026",
   "metadata": {
    "papermill": {
     "duration": 0.013816,
     "end_time": "2024-11-05T11:03:51.252445",
     "exception": false,
     "start_time": "2024-11-05T11:03:51.238629",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Environment Setup\r\n",
    "\r\n",
    "First, we ensure that all necessary libraries are installed and loaded. This section will help set up libraries specific to Hugging Face's Transformers, dataset handling, and LoRA adaptation. If any packages are missing, we include helper functions to install them seamlessly.\r\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c8675a4f",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-11-05T11:03:51.279818Z",
     "iopub.status.busy": "2024-11-05T11:03:51.279392Z",
     "iopub.status.idle": "2024-11-05T11:04:11.953538Z",
     "shell.execute_reply": "2024-11-05T11:04:11.952346Z"
    },
    "papermill": {
     "duration": 20.690789,
     "end_time": "2024-11-05T11:04:11.955770",
     "exception": false,
     "start_time": "2024-11-05T11:03:51.264981",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/dsaa-6100-finetune-llm/train_data.csv\n",
      "/kaggle/input/dsaa-6100-finetune-llm/test_data.csv\n"
     ]
    }
   ],
   "source": [
    "import transformers\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import datasets\n",
    "import torch\n",
    "from transformers import MT5ForConditionalGeneration, MT5Tokenizer, Trainer, TrainingArguments\n",
    "import torch\n",
    "import os\n",
    "from datasets import Dataset\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "d5f6b96c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-05T11:04:11.981031Z",
     "iopub.status.busy": "2024-11-05T11:04:11.980409Z",
     "iopub.status.idle": "2024-11-05T11:04:23.963524Z",
     "shell.execute_reply": "2024-11-05T11:04:23.962743Z"
    },
    "papermill": {
     "duration": 11.99805,
     "end_time": "2024-11-05T11:04:23.965790",
     "exception": false,
     "start_time": "2024-11-05T11:04:11.967740",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def install_package(package):\n",
    "    import subprocess \n",
    "    import sys\n",
    "    subprocess.call([sys.executable, \"-m\", \"pip\", \"install\", package], stdout=open(os.devnull, 'wb'), stderr=open(os.devnull, 'wb'))\n",
    "\n",
    "# Example: Install numpy without logs\n",
    "install_package('peft')\n",
    "\n",
    "from peft import PeftModel, PeftConfig, get_peft_model, LoraConfig"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "245a38a8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-05T11:04:23.991542Z",
     "iopub.status.busy": "2024-11-05T11:04:23.990855Z",
     "iopub.status.idle": "2024-11-05T11:04:24.053350Z",
     "shell.execute_reply": "2024-11-05T11:04:24.052411Z"
    },
    "papermill": {
     "duration": 0.077925,
     "end_time": "2024-11-05T11:04:24.055916",
     "exception": false,
     "start_time": "2024-11-05T11:04:23.977991",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "GPU\n"
     ]
    }
   ],
   "source": [
    "if torch.cuda.is_available():\n",
    "    device = torch.device(\"cuda\")\n",
    "    print(\"GPU\")# Use GPU\n",
    "else:\n",
    "    device = torch.device(\"cpu\")\n",
    "    print(\"CPU\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cac57639",
   "metadata": {
    "papermill": {
     "duration": 0.011326,
     "end_time": "2024-11-05T11:04:24.079461",
     "exception": false,
     "start_time": "2024-11-05T11:04:24.068135",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Model and Tokenizer Initialization\r\n",
    "\r\n",
    "We initialize the pre-trained MT5 model and its tokenizer. MT5 is a multilingual transformer model, particularly effective for tasks across different languages. This step prepares the model for adaptation and makes it ready for fine-tuning in the next steps.\r\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "195ff7b8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-05T11:04:24.104221Z",
     "iopub.status.busy": "2024-11-05T11:04:24.103606Z",
     "iopub.status.idle": "2024-11-05T11:04:31.513256Z",
     "shell.execute_reply": "2024-11-05T11:04:31.512090Z"
    },
    "papermill": {
     "duration": 7.428195,
     "end_time": "2024-11-05T11:04:31.519155",
     "exception": false,
     "start_time": "2024-11-05T11:04:24.090960",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "7ef81c54cf384fed86ffc942acac5490",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "tokenizer_config.json:   0%|          | 0.00/2.54k [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "b2b9c474330241c3b39071bd45ef8567",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "spiece.model:   0%|          | 0.00/792k [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "65b77d53dcc9496c936296d0e20d1bca",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "special_tokens_map.json:   0%|          | 0.00/2.20k [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "7a6249317fee40188379284894fdb61f",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "tokenizer.json:   0%|          | 0.00/2.42M [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "You are using the default legacy behaviour of the <class 'transformers.models.t5.tokenization_t5.T5Tokenizer'>. This is expected, and simply means that the `legacy` (previous) behavior will be used so nothing changes for you. If you want to use the new behaviour, set `legacy=False`. This should only be set if you understand what it means, and thoroughly read the reason why this was added as explained in https://github.com/huggingface/transformers/pull/24565\n",
      "/opt/conda/lib/python3.10/site-packages/transformers/tokenization_utils_base.py:1601: FutureWarning: `clean_up_tokenization_spaces` was not set. It will be set to `True` by default. This behavior will be depracted in transformers v4.45, and will be then set to `False` by default. For more details check this issue: https://github.com/huggingface/transformers/issues/31884\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "9d717ae28e744494a637e59d179a1c0f",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "config.json:   0%|          | 0.00/1.40k [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "You are using a model of type t5 to instantiate a model of type mt5. This is not supported for all configurations of models and can yield errors.\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "f1d04447cd814acfabedc65738cd52fa",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "model.safetensors:   0%|          | 0.00/990M [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "6ef77ffc48b84031bb1b991029000808",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "generation_config.json:   0%|          | 0.00/147 [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Load the model and tokenizer\n",
    "model_name = \"google/flan-t5-base\"\n",
    "tokenizer = MT5Tokenizer.from_pretrained(model_name)\n",
    "model = MT5ForConditionalGeneration.from_pretrained(model_name)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "360276ce",
   "metadata": {
    "papermill": {
     "duration": 0.016785,
     "end_time": "2024-11-05T11:04:31.553094",
     "exception": false,
     "start_time": "2024-11-05T11:04:31.536309",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Introduction to LoRA Fine-Tuning\r\n",
    "\r\n",
    "Fine-tuning large models directly can be resource-intensive, as it requires updating all model parameters. LoRA (Low-Rank Adaptation) is a technique that allows us to add new weights to the model in a way that reduces the number of parameters requiring updates, achieving nearly equivalent performance with far fewer computations. Here, we set up LoRA configurations, specifying parameters like rank and scaling factors.\r\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "824e6011",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-05T11:04:31.581495Z",
     "iopub.status.busy": "2024-11-05T11:04:31.581165Z",
     "iopub.status.idle": "2024-11-05T11:04:31.586332Z",
     "shell.execute_reply": "2024-11-05T11:04:31.585435Z"
    },
    "papermill": {
     "duration": 0.021256,
     "end_time": "2024-11-05T11:04:31.588346",
     "exception": false,
     "start_time": "2024-11-05T11:04:31.567090",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from peft import get_peft_model, LoraConfig, TaskType\n",
    "# Define LoRA configuration for PEFT\n",
    "lora_config = LoraConfig(\n",
    "    task_type=TaskType.SEQ_2_SEQ_LM,  # Set task type as sequence-to-sequence\n",
    "    r=16,  # LoRA rank, controls the number of adapter parameters\n",
    "    lora_alpha=32,  # Scaling factor for LoRA\n",
    "    lora_dropout=0.1,  # Dropout for regularization\n",
    "    target_modules=[\"q\", \"v\"],  # Apply LoRA to the query and value layers in attention\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "c0dc07f6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-05T11:04:31.615894Z",
     "iopub.status.busy": "2024-11-05T11:04:31.615264Z",
     "iopub.status.idle": "2024-11-05T11:04:31.620874Z",
     "shell.execute_reply": "2024-11-05T11:04:31.620152Z"
    },
    "papermill": {
     "duration": 0.021601,
     "end_time": "2024-11-05T11:04:31.622846",
     "exception": false,
     "start_time": "2024-11-05T11:04:31.601245",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def report_trainable_parameters(model):\n",
    "    trainable_params = 0\n",
    "    total_params = 0\n",
    "    \n",
    "    for name, param in model.named_parameters():\n",
    "        if param.requires_grad:\n",
    "            #print(f\"Trainable parameter: {name}\")\n",
    "            trainable_params += param.numel()\n",
    "        total_params += param.numel()\n",
    "    \n",
    "    print(f\"\\nTotal trainable parameters: {trainable_params}\")\n",
    "    print(f\"Total parameters: {total_params}\")\n",
    "    print(f\"Trainable parameters percentage : {100*trainable_params/total_params}\")\n",
    "    return"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "3d254429",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-05T11:04:31.649890Z",
     "iopub.status.busy": "2024-11-05T11:04:31.649610Z",
     "iopub.status.idle": "2024-11-05T11:04:31.656606Z",
     "shell.execute_reply": "2024-11-05T11:04:31.655718Z"
    },
    "papermill": {
     "duration": 0.022858,
     "end_time": "2024-11-05T11:04:31.658653",
     "exception": false,
     "start_time": "2024-11-05T11:04:31.635795",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Total trainable parameters: 247577856\n",
      "Total parameters: 247577856\n",
      "Trainable parameters percentage : 100.0\n"
     ]
    }
   ],
   "source": [
    "report_trainable_parameters(model)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "c11b6d8c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-05T11:04:31.685968Z",
     "iopub.status.busy": "2024-11-05T11:04:31.685666Z",
     "iopub.status.idle": "2024-11-05T11:04:31.821915Z",
     "shell.execute_reply": "2024-11-05T11:04:31.820850Z"
    },
    "papermill": {
     "duration": 0.152498,
     "end_time": "2024-11-05T11:04:31.824108",
     "exception": false,
     "start_time": "2024-11-05T11:04:31.671610",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Total trainable parameters: 1769472\n",
      "Total parameters: 249347328\n",
      "Trainable parameters percentage : 0.7096414524241463\n"
     ]
    }
   ],
   "source": [
    "# Apply LoRA to the mT5 model\n",
    "model = get_peft_model(model, lora_config)\n",
    "report_trainable_parameters(model)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "34d8c6d5",
   "metadata": {
    "papermill": {
     "duration": 0.012932,
     "end_time": "2024-11-05T11:04:31.850348",
     "exception": false,
     "start_time": "2024-11-05T11:04:31.837416",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Data Preprocessing\r\n",
    "\r\n",
    "Preparing our dataset is critical for effective model training. In this section, we load and preprocess the data, converting it into a format compatible with the MT5 model. This includes tokenizing text inputs and structuring them into a dataset suitable for conditional generation tasks.\r\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "3de66ec7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-05T11:04:31.878382Z",
     "iopub.status.busy": "2024-11-05T11:04:31.877945Z",
     "iopub.status.idle": "2024-11-05T11:04:31.940220Z",
     "shell.execute_reply": "2024-11-05T11:04:31.939388Z"
    },
    "papermill": {
     "duration": 0.079118,
     "end_time": "2024-11-05T11:04:31.942609",
     "exception": false,
     "start_time": "2024-11-05T11:04:31.863491",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Load training and testing data\n",
    "train_data = pd.read_csv('/kaggle/input/dsaa-6100-finetune-llm/train_data.csv')\n",
    "test_data = pd.read_csv('/kaggle/input/dsaa-6100-finetune-llm/test_data.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "12adc162",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-05T11:04:31.971327Z",
     "iopub.status.busy": "2024-11-05T11:04:31.970647Z",
     "iopub.status.idle": "2024-11-05T11:04:31.981289Z",
     "shell.execute_reply": "2024-11-05T11:04:31.980419Z"
    },
    "papermill": {
     "duration": 0.027119,
     "end_time": "2024-11-05T11:04:31.983163",
     "exception": false,
     "start_time": "2024-11-05T11:04:31.956044",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'<s>[INST] What are the differences between the dreambooth and textual inversion techniques to customize and enhance a diffusion generative model? \\nCould you provide examples of use-cases when one could be better than the other? </INST>'"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data.iloc[0]['Input Context']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "04a6629a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-05T11:04:32.012121Z",
     "iopub.status.busy": "2024-11-05T11:04:32.011308Z",
     "iopub.status.idle": "2024-11-05T11:04:32.017503Z",
     "shell.execute_reply": "2024-11-05T11:04:32.016608Z"
    },
    "papermill": {
     "duration": 0.022761,
     "end_time": "2024-11-05T11:04:32.019527",
     "exception": false,
     "start_time": "2024-11-05T11:04:31.996766",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "' Dreambooth and Textual Inversion are two techniques for customizing and enhancing a Diffusion Generative Model (DGM).\\n\\nDreambooth refers to a technique where the DGM is fine-tuned to generate high-quality images that match a given description, by using a discriminator network to evaluate the quality of the generated images and to guide the training process. The dreambooth technique is particularly useful in use-cases where the goal is to generate images based on textual descriptions, such as in computer vision or artistic applications.\\n\\nTextual Inversion refers to a technique where the DGM is fine-tuned to generate textual descriptions that match a given image, by using a discriminator network to evaluate the quality of the generated descriptions and to guide the training process. The textual inversion technique is particularly useful in use-cases where the goal is to generate descriptive texts for images, such as in natural language processing or image captioning applications.\\n\\nIn summary, both dreambooth and textual inversion techniques can be used to enhance the performance of a DGM by fine-tuning it to specific use-cases, but they focus on different aspects of the model - dreambooth on image generation and textual inversion on textual description generation. The choice between the two techniques would depend on the specific requirements of the application. </s><s>[INST] very interesting. what else can Textual Inversion be used for? '"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data.iloc[0]['Output Content']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "c173f998",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-05T11:04:32.047589Z",
     "iopub.status.busy": "2024-11-05T11:04:32.047298Z",
     "iopub.status.idle": "2024-11-05T11:04:32.053173Z",
     "shell.execute_reply": "2024-11-05T11:04:32.052272Z"
    },
    "papermill": {
     "duration": 0.022092,
     "end_time": "2024-11-05T11:04:32.055166",
     "exception": false,
     "start_time": "2024-11-05T11:04:32.033074",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'<s>[INST] can you layout base cabinets for me for a 12 x 12 L shaped kitchen with the sink centered on the right and stove and fridge of the left? Use just standard RTA cabinet sizes. </INST>'"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data.iloc[330]['Input Context']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "3c7e7ed3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-05T11:04:32.083745Z",
     "iopub.status.busy": "2024-11-05T11:04:32.083455Z",
     "iopub.status.idle": "2024-11-05T11:04:32.089238Z",
     "shell.execute_reply": "2024-11-05T11:04:32.088396Z"
    },
    "papermill": {
     "duration": 0.0223,
     "end_time": "2024-11-05T11:04:32.091229",
     "exception": false,
     "start_time": "2024-11-05T11:04:32.068929",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "' Sure, here\\'s a layout for the base cabinets in a 12 x 12 L-shaped kitchen with a sink on the right and the stove and refrigerator on the left, using standard RTA cabinet sizes:\\n\\n| 36\" Sink Base | 30\" Corner Base | 24\" Base | 36\" Base |\\n| 30\" Base     |                |           | 24\" Base |\\n\\nPlease keep in mind that this is just one possible layout; there are many more depending on your specific needs and preferences. You should also consider each cabinet\\'s height, depth, and width to ensure that it fits properly in your kitchen space and provides the necessary storage and functionality. To design a kitchen layout that meets your needs and fits your space, it\\'s always a good idea to consult with a professional or use an online planning tool. </s>'"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data.iloc[330]['Output Content']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d444cc61",
   "metadata": {
    "papermill": {
     "duration": 0.013536,
     "end_time": "2024-11-05T11:04:32.118443",
     "exception": false,
     "start_time": "2024-11-05T11:04:32.104907",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "We see that the dataset already includes special tokens like [INST]. We can either remove them before passing it to the tokenizer or inform the tokenizer that the input text includes special characters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "44e9e8c0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-05T11:04:32.147149Z",
     "iopub.status.busy": "2024-11-05T11:04:32.146804Z",
     "iopub.status.idle": "2024-11-05T11:04:32.151791Z",
     "shell.execute_reply": "2024-11-05T11:04:32.150904Z"
    },
    "papermill": {
     "duration": 0.02162,
     "end_time": "2024-11-05T11:04:32.153787",
     "exception": false,
     "start_time": "2024-11-05T11:04:32.132167",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# We should remove special charachters from the dataset like [INST], <s>, ...\n",
    "def remove_special_charachters(input_text):\n",
    "    cleaned_text = input_text.replace(\"<s>\", \"\").replace(\"[INST]\", \"\").replace(\"</INST>\", \"\").replace(\"</s>\", \"\").strip()\n",
    "    return cleaned_text"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "76099ab0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-05T11:04:32.182158Z",
     "iopub.status.busy": "2024-11-05T11:04:32.181848Z",
     "iopub.status.idle": "2024-11-05T11:04:32.187920Z",
     "shell.execute_reply": "2024-11-05T11:04:32.187042Z"
    },
    "papermill": {
     "duration": 0.022357,
     "end_time": "2024-11-05T11:04:32.189725",
     "exception": false,
     "start_time": "2024-11-05T11:04:32.167368",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Dreambooth and Textual Inversion are two techniques for customizing and enhancing a Diffusion Generative Model (DGM).\\n\\nDreambooth refers to a technique where the DGM is fine-tuned to generate high-quality images that match a given description, by using a discriminator network to evaluate the quality of the generated images and to guide the training process. The dreambooth technique is particularly useful in use-cases where the goal is to generate images based on textual descriptions, such as in computer vision or artistic applications.\\n\\nTextual Inversion refers to a technique where the DGM is fine-tuned to generate textual descriptions that match a given image, by using a discriminator network to evaluate the quality of the generated descriptions and to guide the training process. The textual inversion technique is particularly useful in use-cases where the goal is to generate descriptive texts for images, such as in natural language processing or image captioning applications.\\n\\nIn summary, both dreambooth and textual inversion techniques can be used to enhance the performance of a DGM by fine-tuning it to specific use-cases, but they focus on different aspects of the model - dreambooth on image generation and textual inversion on textual description generation. The choice between the two techniques would depend on the specific requirements of the application.  very interesting. what else can Textual Inversion be used for?'"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "remove_special_charachters(train_data.iloc[0]['Output Content'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1e3c8f45",
   "metadata": {
    "papermill": {
     "duration": 0.013573,
     "end_time": "2024-11-05T11:04:32.217251",
     "exception": false,
     "start_time": "2024-11-05T11:04:32.203678",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Prompt Templates\n",
    "Which prompt template should we use?\n",
    "Having special charachters alone means that prompt template has been applied."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "28750f87",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-05T11:04:32.245776Z",
     "iopub.status.busy": "2024-11-05T11:04:32.245463Z",
     "iopub.status.idle": "2024-11-05T11:04:32.252263Z",
     "shell.execute_reply": "2024-11-05T11:04:32.251463Z"
    },
    "papermill": {
     "duration": 0.023214,
     "end_time": "2024-11-05T11:04:32.254149",
     "exception": false,
     "start_time": "2024-11-05T11:04:32.230935",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def preprocess_function(examples):\n",
    "    inputs = examples['Input Context']\n",
    "    targets = examples['Output Content']\n",
    "    #cleaned_inputs = [remove_special_charachters(input) for input in inputs]\n",
    "    #cleaned_targets = [remove_special_charachters(target) for target in targets]\n",
    "    #model_inputs = tokenizer(cleaned_inputs, text_target=cleaned_targets, max_length=512, truncation=True, padding=\"max_length\")\n",
    "    \n",
    "    # Add custom tokens to the tokenizer\n",
    "    custom_special_tokens = [\"[INST]\", \"</INST>\", \"<s>\", \"</s>\"]\n",
    "    tokenizer.add_special_tokens({\"additional_special_tokens\": custom_special_tokens})\n",
    "    model_inputs = tokenizer(inputs, text_target=targets, max_length=512, truncation=True, padding=\"max_length\")\n",
    "    # Convert labels (lists) to tensors\n",
    "    labels_tensor = torch.tensor(model_inputs['labels'])\n",
    "    print(model_inputs.keys())\n",
    "        # Create a new dictionary with specified columns\n",
    "    processed_output = {\n",
    "        'input_ids': torch.tensor(model_inputs['input_ids']),                 # This is a tensor\n",
    "        'attention_mask': torch.tensor(model_inputs['attention_mask']),       # This is a tensor\n",
    "        'labels': torch.tensor(model_inputs['labels']),                         # This is a tensor\n",
    "        #'decoder_input_ids': shift_tokens_right(labels_tensor, tokenizer.pad_token_id),   # This is a tensor\n",
    "    }\n",
    "    \n",
    "    return processed_output"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "edfb7d01",
   "metadata": {
    "papermill": {
     "duration": 0.013499,
     "end_time": "2024-11-05T11:04:32.281397",
     "exception": false,
     "start_time": "2024-11-05T11:04:32.267898",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Training Setup and Execution\r\n",
    "\r\n",
    "With the model, data, and configurations ready, we define training arguments such as learning rate, batch size, and number of epochs. Using Hugging Face's `Trainer` API, we start the training process, leveraging GPU acceleration if available. This step will fine-tune the model based on our LoRA setup, adapting it to perform well on our specific task.\r\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "89136f4b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-05T11:04:32.310275Z",
     "iopub.status.busy": "2024-11-05T11:04:32.309918Z",
     "iopub.status.idle": "2024-11-05T11:04:35.217704Z",
     "shell.execute_reply": "2024-11-05T11:04:35.216805Z"
    },
    "papermill": {
     "duration": 2.924573,
     "end_time": "2024-11-05T11:04:35.219614",
     "exception": false,
     "start_time": "2024-11-05T11:04:32.295041",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "aaf6fa0dd99442c2a683d1c075872139",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Map:   0%|          | 0/950 [00:00<?, ? examples/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/transformers/models/t5/tokenization_t5.py:289: UserWarning: This sequence already has </s>. In future versions this behavior may lead to duplicated eos tokens being added.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "dict_keys(['input_ids', 'attention_mask', 'labels'])\n"
     ]
    }
   ],
   "source": [
    "# Convert your pandas DataFrame to a Hugging Face Dataset\n",
    "train_dataset = Dataset.from_pandas(train_data)\n",
    "\n",
    "# Apply preprocessing\n",
    "train_dataset = train_dataset.map(preprocess_function, batched=True)\n",
    "\n",
    "# Drop specified columns (e.g., 'ID' and 'Output Content')\n",
    "train_dataset = train_dataset.remove_columns(['ID', 'Output Content','Input Context' ])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "59adb951",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-05T11:04:35.250238Z",
     "iopub.status.busy": "2024-11-05T11:04:35.249397Z",
     "iopub.status.idle": "2024-11-05T11:04:35.261843Z",
     "shell.execute_reply": "2024-11-05T11:04:35.260986Z"
    },
    "papermill": {
     "duration": 0.02958,
     "end_time": "2024-11-05T11:04:35.263701",
     "exception": false,
     "start_time": "2024-11-05T11:04:35.234121",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_dataset, eval_dataset = train_dataset.train_test_split(test_size=0.2).values()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "64b606f4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-05T11:04:35.293233Z",
     "iopub.status.busy": "2024-11-05T11:04:35.292888Z",
     "iopub.status.idle": "2024-11-05T11:04:35.796036Z",
     "shell.execute_reply": "2024-11-05T11:04:35.794819Z"
    },
    "papermill": {
     "duration": 0.521833,
     "end_time": "2024-11-05T11:04:35.799610",
     "exception": false,
     "start_time": "2024-11-05T11:04:35.277777",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "model = model.to(device)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "7909e1ca",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-05T11:04:35.829979Z",
     "iopub.status.busy": "2024-11-05T11:04:35.829645Z",
     "iopub.status.idle": "2024-11-05T11:04:35.862185Z",
     "shell.execute_reply": "2024-11-05T11:04:35.860985Z"
    },
    "papermill": {
     "duration": 0.049762,
     "end_time": "2024-11-05T11:04:35.864206",
     "exception": false,
     "start_time": "2024-11-05T11:04:35.814444",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/transformers/training_args.py:1525: FutureWarning: `evaluation_strategy` is deprecated and will be removed in version 4.46 of 🤗 Transformers. Use `eval_strategy` instead\n",
      "  warnings.warn(\n"
     ]
    }
   ],
   "source": [
    "from transformers import DataCollatorForSeq2Seq, Trainer, TrainingArguments\n",
    "\n",
    "# Initialize the data collator\n",
    "data_collator = DataCollatorForSeq2Seq(\n",
    "    tokenizer=tokenizer,  # Your tokenizer\n",
    "    model=model,          # Your mT5 model\n",
    "    padding=True          # Dynamic padding\n",
    ")\n",
    "\n",
    "\n",
    "# Set training arguments\n",
    "training_args = TrainingArguments(\n",
    "    output_dir='./results',\n",
    "    eval_strategy=\"no\",\n",
    "    learning_rate=2e-5,\n",
    "    load_best_model_at_end=True,\n",
    "    save_strategy=\"steps\",\n",
    "    evaluation_strategy=\"steps\",\n",
    "    per_device_train_batch_size=2,\n",
    "    per_device_eval_batch_size=1,     # Reduced batch size\n",
    "    num_train_epochs=50,\n",
    "    weight_decay=0.01,\n",
    "    save_total_limit=2,\n",
    "    remove_unused_columns=False,  # Add this line\n",
    "    report_to = \"none\",\n",
    "    gradient_accumulation_steps=2,\n",
    "    save_safetensors=False,  # Add this line\n",
    ")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "c69dd5c6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-05T11:04:35.895667Z",
     "iopub.status.busy": "2024-11-05T11:04:35.895341Z",
     "iopub.status.idle": "2024-11-05T11:04:35.935974Z",
     "shell.execute_reply": "2024-11-05T11:04:35.935196Z"
    },
    "papermill": {
     "duration": 0.058566,
     "end_time": "2024-11-05T11:04:35.938124",
     "exception": false,
     "start_time": "2024-11-05T11:04:35.879558",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Initialize the Trainer\n",
    "trainer = Trainer(\n",
    "    model=model,\n",
    "    args=training_args,\n",
    "    train_dataset=train_dataset,\n",
    "    data_collator=data_collator,# Use the dynamic padding collator\n",
    "    tokenizer = tokenizer,\n",
    "    eval_dataset=eval_dataset,\n",
    ")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "5d890ea9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-05T11:04:35.968536Z",
     "iopub.status.busy": "2024-11-05T11:04:35.968207Z",
     "iopub.status.idle": "2024-11-05T11:04:35.972320Z",
     "shell.execute_reply": "2024-11-05T11:04:35.971427Z"
    },
    "papermill": {
     "duration": 0.021648,
     "end_time": "2024-11-05T11:04:35.974219",
     "exception": false,
     "start_time": "2024-11-05T11:04:35.952571",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Clear the CUDA cache\n",
    "torch.cuda.empty_cache()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "6ffe767e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-05T11:04:36.003908Z",
     "iopub.status.busy": "2024-11-05T11:04:36.003598Z",
     "iopub.status.idle": "2024-11-05T12:44:22.506582Z",
     "shell.execute_reply": "2024-11-05T12:44:22.505608Z"
    },
    "papermill": {
     "duration": 5986.520051,
     "end_time": "2024-11-05T12:44:22.508623",
     "exception": false,
     "start_time": "2024-11-05T11:04:35.988572",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "    <div>\n",
       "      \n",
       "      <progress value='9500' max='9500' style='width:300px; height:20px; vertical-align: middle;'></progress>\n",
       "      [9500/9500 1:39:43, Epoch 50/50]\n",
       "    </div>\n",
       "    <table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       " <tr style=\"text-align: left;\">\n",
       "      <th>Step</th>\n",
       "      <th>Training Loss</th>\n",
       "      <th>Validation Loss</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>500</td>\n",
       "      <td>17.351400</td>\n",
       "      <td>11.027323</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1000</td>\n",
       "      <td>5.693700</td>\n",
       "      <td>3.586545</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1500</td>\n",
       "      <td>3.678900</td>\n",
       "      <td>3.235327</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2000</td>\n",
       "      <td>3.137800</td>\n",
       "      <td>2.290404</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2500</td>\n",
       "      <td>2.542400</td>\n",
       "      <td>1.802088</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3000</td>\n",
       "      <td>2.193200</td>\n",
       "      <td>1.613476</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3500</td>\n",
       "      <td>2.024700</td>\n",
       "      <td>1.527195</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4000</td>\n",
       "      <td>1.893600</td>\n",
       "      <td>1.480048</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4500</td>\n",
       "      <td>1.825000</td>\n",
       "      <td>1.440965</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5000</td>\n",
       "      <td>1.766400</td>\n",
       "      <td>1.415836</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5500</td>\n",
       "      <td>1.720200</td>\n",
       "      <td>1.401303</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6000</td>\n",
       "      <td>1.702200</td>\n",
       "      <td>1.390983</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6500</td>\n",
       "      <td>1.668900</td>\n",
       "      <td>1.384196</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7000</td>\n",
       "      <td>1.660000</td>\n",
       "      <td>1.378661</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7500</td>\n",
       "      <td>1.629800</td>\n",
       "      <td>1.374533</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8000</td>\n",
       "      <td>1.637100</td>\n",
       "      <td>1.371065</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8500</td>\n",
       "      <td>1.641700</td>\n",
       "      <td>1.368796</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9000</td>\n",
       "      <td>1.614900</td>\n",
       "      <td>1.367670</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9500</td>\n",
       "      <td>1.621400</td>\n",
       "      <td>1.367212</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table><p>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "TrainOutput(global_step=9500, training_loss=3.00016505833676, metrics={'train_runtime': 5984.959, 'train_samples_per_second': 6.349, 'train_steps_per_second': 1.587, 'total_flos': 2.6227340476416e+16, 'train_loss': 3.00016505833676, 'epoch': 50.0})"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Train the model\n",
    "trainer.train()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "82aa6f6e",
   "metadata": {
    "papermill": {
     "duration": 0.014556,
     "end_time": "2024-11-05T12:44:22.538146",
     "exception": false,
     "start_time": "2024-11-05T12:44:22.523590",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Save the Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "be8ff53d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-05T12:44:22.569845Z",
     "iopub.status.busy": "2024-11-05T12:44:22.568899Z",
     "iopub.status.idle": "2024-11-05T12:44:22.905960Z",
     "shell.execute_reply": "2024-11-05T12:44:22.905027Z"
    },
    "papermill": {
     "duration": 0.355586,
     "end_time": "2024-11-05T12:44:22.908279",
     "exception": false,
     "start_time": "2024-11-05T12:44:22.552693",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "You are using a model of type t5 to instantiate a model of type mt5. This is not supported for all configurations of models and can yield errors.\n"
     ]
    }
   ],
   "source": [
    "trainer.model.save_pretrained('./results')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dad771b4",
   "metadata": {
    "papermill": {
     "duration": 0.014623,
     "end_time": "2024-11-05T12:44:22.938131",
     "exception": false,
     "start_time": "2024-11-05T12:44:22.923508",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Model Evaluation and Analysis\r\n",
    "\r\n",
    "After training, it’s essential to evaluate the model's performance. This section includes methods to assess model accuracy, analyze prediction quality, and identify potential areas for improvement. By understanding how well the model performs, we can iterate and fine-tune further as needed.\r\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "cea3b69e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-05T12:44:22.969350Z",
     "iopub.status.busy": "2024-11-05T12:44:22.968696Z",
     "iopub.status.idle": "2024-11-05T12:44:35.554253Z",
     "shell.execute_reply": "2024-11-05T12:44:35.553279Z"
    },
    "papermill": {
     "duration": 12.603441,
     "end_time": "2024-11-05T12:44:35.556304",
     "exception": false,
     "start_time": "2024-11-05T12:44:22.952863",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "    <div>\n",
       "      \n",
       "      <progress value='190' max='190' style='width:300px; height:20px; vertical-align: middle;'></progress>\n",
       "      [190/190 00:12]\n",
       "    </div>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "{'eval_loss': 1.3672120571136475,\n",
       " 'eval_runtime': 12.5777,\n",
       " 'eval_samples_per_second': 15.106,\n",
       " 'eval_steps_per_second': 15.106,\n",
       " 'epoch': 50.0}"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trainer.evaluate()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "a2a44003",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-05T12:44:35.590851Z",
     "iopub.status.busy": "2024-11-05T12:44:35.590502Z",
     "iopub.status.idle": "2024-11-05T12:44:36.961043Z",
     "shell.execute_reply": "2024-11-05T12:44:36.960252Z"
    },
    "papermill": {
     "duration": 1.391191,
     "end_time": "2024-11-05T12:44:36.963275",
     "exception": false,
     "start_time": "2024-11-05T12:44:35.572084",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "model.eval()\n",
    "# Prepare the input text\n",
    "input_text = \"Translate this sentence to French: 'How are you today?'\"\n",
    "input_text = \"How are you today?\"\n",
    "inputs = tokenizer(input_text, return_tensors=\"pt\")\n",
    "inputs = {key: tensor.to(device) for key, tensor in inputs.items()}  # Move input tensors to GPU\n",
    "\n",
    "\n",
    "\n",
    "# Generate output (adjust max_length if necessary)\n",
    "with torch.no_grad():\n",
    "    output_ids = model.generate(input_ids=inputs[\"input_ids\"], attention_mask=inputs[\"attention_mask\"], max_length=50)\n",
    "\n",
    "\n",
    "\n",
    "output_text = tokenizer.decode(output_ids[0], skip_special_tokens=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "f48331b7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-05T12:44:36.995552Z",
     "iopub.status.busy": "2024-11-05T12:44:36.995174Z",
     "iopub.status.idle": "2024-11-05T12:44:37.001117Z",
     "shell.execute_reply": "2024-11-05T12:44:37.000243Z"
    },
    "papermill": {
     "duration": 0.024351,
     "end_time": "2024-11-05T12:44:37.003093",
     "exception": false,
     "start_time": "2024-11-05T12:44:36.978742",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\"I'm going to be a little bit spooky today. I'm going to be a little bit spooky today. I'm going to be a little bit spooky today. I\""
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "output_text"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c4265280",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-20T11:21:43.269799Z",
     "iopub.status.busy": "2024-10-20T11:21:43.268935Z",
     "iopub.status.idle": "2024-10-20T11:21:43.274068Z",
     "shell.execute_reply": "2024-10-20T11:21:43.273022Z",
     "shell.execute_reply.started": "2024-10-20T11:21:43.269755Z"
    },
    "papermill": {
     "duration": 0.01495,
     "end_time": "2024-11-05T12:44:37.033341",
     "exception": false,
     "start_time": "2024-11-05T12:44:37.018391",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Test Data Inference"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "5f17d235",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-05T12:44:37.064979Z",
     "iopub.status.busy": "2024-11-05T12:44:37.064633Z",
     "iopub.status.idle": "2024-11-05T12:44:37.071109Z",
     "shell.execute_reply": "2024-11-05T12:44:37.070226Z"
    },
    "papermill": {
     "duration": 0.024523,
     "end_time": "2024-11-05T12:44:37.072937",
     "exception": false,
     "start_time": "2024-11-05T12:44:37.048414",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def testdata_preprocess_function(examples):\n",
    "    inputs = examples['Input Content']\n",
    "    # Add custom tokens to the tokenizer\n",
    "    custom_special_tokens = [\"[INST]\", \"</INST>\", \"<s>\", \"</s>\"]\n",
    "    tokenizer.add_special_tokens({\"additional_special_tokens\": custom_special_tokens})\n",
    "    model_inputs = tokenizer(inputs, max_length=512, truncation=True, padding=\"max_length\")\n",
    "    # Convert labels (lists) to tensors\n",
    "    #labels_tensor = torch.tensor(model_inputs['labels'])\n",
    "    print(model_inputs.keys())\n",
    "        # Create a new dictionary with specified columns\n",
    "    processed_output = {\n",
    "        'input_ids': torch.tensor(model_inputs['input_ids']),                 # This is a tensor\n",
    "        'attention_mask': torch.tensor(model_inputs['attention_mask']),       # This is a tensor\n",
    "        #'decoder_input_ids': shift_tokens_right(labels_tensor, tokenizer.pad_token_id),   # This is a tensor\n",
    "    }\n",
    "    \n",
    "    return processed_output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "9806c792",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-05T12:44:37.104889Z",
     "iopub.status.busy": "2024-11-05T12:44:37.104597Z",
     "iopub.status.idle": "2024-11-05T12:44:37.366409Z",
     "shell.execute_reply": "2024-11-05T12:44:37.365492Z"
    },
    "papermill": {
     "duration": 0.280359,
     "end_time": "2024-11-05T12:44:37.368519",
     "exception": false,
     "start_time": "2024-11-05T12:44:37.088160",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "46c44695f19d4ef3a9a278af73e8c1c7",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Map:   0%|          | 0/50 [00:00<?, ? examples/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "dict_keys(['input_ids', 'attention_mask'])\n"
     ]
    }
   ],
   "source": [
    "# Convert your pandas DataFrame to a Hugging Face Dataset\n",
    "test_dataset = Dataset.from_pandas(test_data)\n",
    "\n",
    "# Apply preprocessing\n",
    "test_dataset = test_dataset.map(testdata_preprocess_function, batched=True)\n",
    "\n",
    "# Drop specified columns (e.g., 'ID' and 'Output Content')\n",
    "test_dataset = test_dataset.remove_columns(['ID','Input Content' ])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "c5821bd0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-05T12:44:37.401900Z",
     "iopub.status.busy": "2024-11-05T12:44:37.401160Z",
     "iopub.status.idle": "2024-11-05T12:44:37.452426Z",
     "shell.execute_reply": "2024-11-05T12:44:37.451634Z"
    },
    "papermill": {
     "duration": 0.070378,
     "end_time": "2024-11-05T12:44:37.454680",
     "exception": false,
     "start_time": "2024-11-05T12:44:37.384302",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "input_ids = torch.tensor(test_dataset['input_ids']).to(device)  # Move to GPU\n",
    "attention_mask = torch.tensor(test_dataset['attention_mask']).to(device) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "00e9a6d1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-05T12:44:37.487726Z",
     "iopub.status.busy": "2024-11-05T12:44:37.487120Z",
     "iopub.status.idle": "2024-11-05T12:44:39.930808Z",
     "shell.execute_reply": "2024-11-05T12:44:39.930018Z"
    },
    "papermill": {
     "duration": 2.462758,
     "end_time": "2024-11-05T12:44:39.933246",
     "exception": false,
     "start_time": "2024-11-05T12:44:37.470488",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "with torch.no_grad():\n",
    "    output_ids = model.generate(input_ids=input_ids, attention_mask=attention_mask, max_length=50)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "61a2dc9c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-05T12:44:39.966896Z",
     "iopub.status.busy": "2024-11-05T12:44:39.966140Z",
     "iopub.status.idle": "2024-11-05T12:44:40.102220Z",
     "shell.execute_reply": "2024-11-05T12:44:40.101418Z"
    },
    "papermill": {
     "duration": 0.155249,
     "end_time": "2024-11-05T12:44:40.104627",
     "exception": false,
     "start_time": "2024-11-05T12:44:39.949378",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Process the output as needed\n",
    "output_text = [tokenizer.decode(temp_output_ids, skip_special_tokens=True) for temp_output_ids in output_ids]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "499e6a93",
   "metadata": {
    "papermill": {
     "duration": 0.017987,
     "end_time": "2024-11-05T12:44:40.138884",
     "exception": false,
     "start_time": "2024-11-05T12:44:40.120897",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "There May be some null texts. To handle this, I place 'None\" Text."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "a231950c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-05T12:44:40.172589Z",
     "iopub.status.busy": "2024-11-05T12:44:40.171840Z",
     "iopub.status.idle": "2024-11-05T12:44:40.176665Z",
     "shell.execute_reply": "2024-11-05T12:44:40.175805Z"
    },
    "papermill": {
     "duration": 0.023616,
     "end_time": "2024-11-05T12:44:40.178555",
     "exception": false,
     "start_time": "2024-11-05T12:44:40.154939",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "for i in range(len(output_text)):\n",
    "    if output_text[i] == '':\n",
    "        output_text[i] = 'None'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "671cfbcf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-05T12:44:40.210614Z",
     "iopub.status.busy": "2024-11-05T12:44:40.210309Z",
     "iopub.status.idle": "2024-11-05T12:44:40.216936Z",
     "shell.execute_reply": "2024-11-05T12:44:40.216056Z"
    },
    "papermill": {
     "duration": 0.024956,
     "end_time": "2024-11-05T12:44:40.218838",
     "exception": false,
     "start_time": "2024-11-05T12:44:40.193882",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['то то такое лаотоне сети?',\n",
       " 'The first thing you need to know is that you need to be able to see the symphony of the symphony.',\n",
       " \"Newton's mechanics is the theory of the mechanics of the physical world. Newton's mechanics is the theory of the mechanics of the physical world. Newton's mechanics is the theory of the mechanics of the physical\",\n",
       " 'I am a sailor, I am a sailor, I am a sailor, I am a sailor, I am a sailor, I am a',\n",
       " 'The Johnson & Johnson one is a mRNA shot developed with the \"viral vector\" technology (such as the Johnson & Johnson one). The Johnson & Johnson one is a mRNA shot developed with the \"',\n",
       " 'ChatGPT is a chat-based messaging service that allows users to communicate with each other in real time. ChatGPT is a messaging service that allows users to communicate with each other in real time. ChatGPT is a',\n",
       " \"I'm a snobby, snobby, snobby, snobby, snobby, snobby, s\",\n",
       " \"I'm a student at the University of California, Berkeley. I'm a student at the University of California, Berkeley. I'm a student at the University of California, Berkeley. I'm a student at\",\n",
       " 'Artificial neural networks are different from our brains in that they are not able to function in a normal environment. They are able to function in a variety of environments, including environments that are not fully automated. Artificial neural networks are',\n",
       " 'El oxmetro es un oxmetro y es un oxmetro en el oxmetro en el ox',\n",
       " \"I'd like to perform a 2 base push with hellion harass in the early game, but I don't know the exact timing of the buildings and when to stop building workers and start attacking.\",\n",
       " 'Por qué es el objetivo de el desarrollador de aplicaciones?',\n",
       " 'аскои аскои моет вват акание у еловека.',\n",
       " 'None',\n",
       " 'Quais riscos para pessoas e empresas que utilizam chats de inteligencia artificial, com baixa explicabilidade?',\n",
       " 'Cuál es la biografa de las letras sobre shakira?',\n",
       " 'La necesidad de aprender inglés siendo hispanohablante utilizando términos que pueden entender un nio en 4',\n",
       " 'Windows 10 is a Windows 10 operating system that is designed to be used in Windows 7 and later. Windows 10 is a Windows operating system that is designed to be used in Windows 7 and later. Windows 10 is a Windows operating system',\n",
       " 'Cómo puede encontrar un cuadro en la pared?',\n",
       " 'Cómo puede limpiar mi piscina?',\n",
       " 'None',\n",
       " 'The risk of ankle arm index is that the tendons in the ankle are not properly inflated and the tendons are not properly inflated. The risk of ankle arm index is that the tendons are not properly inflated and the',\n",
       " \"The equation used to calculate Reynold's number is the equation used to calculate Reynold's number. The equation used to calculate Reynold's number is the equation used to calculate Reynold'\",\n",
       " 'ое росто ое аад аад аад аад а',\n",
       " 'Por qué es el esfuerzo más brutal que el dictador más brutal?',\n",
       " 'Por qué es el código de Python?',\n",
       " 'The periodicity of the trigonometric function is the periodicity of the trigonometric function: f(x) = sin(x)/x. The periodicity of the trigonometric function is the periodicity',\n",
       " 'ак то оволет овит аиеские ролем о ролем',\n",
       " 'Por qué es el problema?',\n",
       " 'Life is the meaning of life.',\n",
       " 'La historia de cine es una historia de la historia de cine que es el más especial de las pelculas de cine. La historia',\n",
       " 'El Centrum es una estructura de nutrición multivitamnico que es una estructura de nutrición multivitamnico que es una',\n",
       " 'El reactor nuclear es un reactor nuclear que funciona en el medio ambiente.',\n",
       " 'Using a Nginx docker container, you can create a new Nginx docker container.',\n",
       " 'Qué es el precio de un audifonos que tienen la siguiente caracterstica: cancelación de ruido activa, bluetooth,',\n",
       " 'The first thing you need to do is to get a good idea of what you are doing. You can do this by looking at the following:',\n",
       " 'Qué es el ley de Ohm?',\n",
       " 'Por qué es el código python en python?',\n",
       " 'Hola! Hola! Hola! Hola! Hola! Hola! Hola! Hola! Hola! Hola',\n",
       " 'La titulada es una titulada acerca de las recolecciones de la sociedad. La titulada es un',\n",
       " 'VQ-VAE is a free energy principle that is related to the free energy principle.',\n",
       " 'None',\n",
       " 'La edad en Espaa es el medio de edad en edad. La edad en edad es el medio de e',\n",
       " 'Open Assistant is a chatbot that can be used to create chatbots, chatbots, chatbots, chatbots, chatbots, chatbots, chatbots, chatbots, chatbots,',\n",
       " 'Separado se escribe separado y separado se escribe separado. Separado se escribe separado y separado. Separad',\n",
       " 'AI language models are a type of language processing system that uses a language model to learn a language. The language model is a language model that is used to learn a language. The language model is a language model that',\n",
       " 'Y eso es una carta dirigida a una Universidad X, en donde se pida disculpas por la entrega tarda de algu',\n",
       " 'Jeremy \"Jeremy\" \"Jeremy\" \"Jeremy\" \"Jeremy\" \"Jeremy\" \"Jeremy\" \"Jeremy\" \"Jeremy\" \"Jeremy\" \"Jeremy\" \"Jeremy\" \"Jeremy\" \"Jeremy\" \"Jeremy\" \"Jeremy\" \"Jeremy',\n",
       " 'The following is a list of the steps you should take to setup authorization and authentication fastapi.',\n",
       " 'ридума сет дл моилно ир.']"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "output_text"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "803edcce",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-05T12:44:40.252498Z",
     "iopub.status.busy": "2024-11-05T12:44:40.251869Z",
     "iopub.status.idle": "2024-11-05T12:44:40.260170Z",
     "shell.execute_reply": "2024-11-05T12:44:40.259222Z"
    },
    "papermill": {
     "duration": 0.0271,
     "end_time": "2024-11-05T12:44:40.262187",
     "exception": false,
     "start_time": "2024-11-05T12:44:40.235087",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "ids = [i+1 for i in range(len(output_text))]\n",
    "submission_data = pd.DataFrame({'Id':ids, 'label':output_text})\n",
    "submission_data.set_index('Id', inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "9abbbe3f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-05T12:44:40.294780Z",
     "iopub.status.busy": "2024-11-05T12:44:40.294505Z",
     "iopub.status.idle": "2024-11-05T12:44:40.302340Z",
     "shell.execute_reply": "2024-11-05T12:44:40.301481Z"
    },
    "papermill": {
     "duration": 0.026152,
     "end_time": "2024-11-05T12:44:40.304116",
     "exception": false,
     "start_time": "2024-11-05T12:44:40.277964",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "submission_data.to_csv('submission.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1b2d8e75",
   "metadata": {
    "papermill": {
     "duration": 0.015512,
     "end_time": "2024-11-05T12:44:40.335394",
     "exception": false,
     "start_time": "2024-11-05T12:44:40.319882",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Conclusion and Next Steps\r\n",
    "\r\n",
    "In this notebook, we successfully fine-tuned an MT5 model using LoRA, a resource-efficient technique. We demonstrated the workflow from model loading and data preprocessing to training and evaluation. As next steps, you could:\r\n",
    "- Experiment with different datasets and tasks.\r\n",
    "- Fine-tune other transformer models using LoRA.\r\n",
    "- Deploy the model or use it in real-world applications.\r\n",
    "\r\n",
    "Thank you for following along!\r\n"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "databundleVersionId": 6849998,
     "sourceId": 62898,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 30776,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 6055.142223,
   "end_time": "2024-11-05T12:44:43.622505",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-11-05T11:03:48.480282",
   "version": "2.6.0"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "00889bbae8a74e63bc84e9df59ce6958": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "05ce910b4973402fa14c6962e5933582": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "06c4762615ee4d60b00d031da0374c37": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "07f277d413ca441fb8246b8bf08196e5": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_23bd51c9597a4011be175be5a508a91a",
       "placeholder": "​",
       "style": "IPY_MODEL_42e53d3824924c04a745a1a8981a13b3",
       "value": " 2.42M/2.42M [00:00&lt;00:00, 6.64MB/s]"
      }
     },
     "082204222c7248e499c65ba646c426db": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_d826c3a3b27a49f581529522dc64c7c8",
       "placeholder": "​",
       "style": "IPY_MODEL_d9ea35476db5480d882923827170c443",
       "value": " 990M/990M [00:04&lt;00:00, 224MB/s]"
      }
     },
     "0dc16a80f3ee4e969cfb8d4d3a6a7821": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "1171ece49f284ee48997bcfcd73f5a5c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "136a4fc461a145f18f7e266d38904971": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "140735f4c14547aa90bc3797a2f0770e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "167cded3f0934ef1a1ef2298c2221d37": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "19b4b5e1b48e4a3da7eaab555cb0063c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "1a8d196ec33048be95dde89554000b23": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "1bafcc0daa60431380b56dcbc8b6926c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "1d34de4825334e208338b6753445e2c9": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "216182efc8a34c00bcdda669d298df50": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "23bd51c9597a4011be175be5a508a91a": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "24652d5d9ea54537a91f7747605c0369": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_774708c5a5854628a8ddcbb4b770b47b",
       "max": 990345061.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_74fe7cbaf650413483f079e6348ed5a7",
       "value": 990345061.0
      }
     },
     "26bbe9b5f98447b7b3a79429993019dd": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "286f99a668714a029bb79cf17dccf3ba": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_50e04038b24d4119bb68b956fe9232bd",
       "max": 1404.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_e190b7a02db841b9a76585e166672d21",
       "value": 1404.0
      }
     },
     "2f165eba5bb349b8a8837c3e7a81b662": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_9a3ecf3ce5ae473bbbe3206105b21c84",
       "max": 2537.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_c34beca2bccb4dceaec86d71d4c8a8b2",
       "value": 2537.0
      }
     },
     "332e53894ce44288b3e2c7c8bbddccd4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "359b3197160b47969ccb0519f5c946fc": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "3ea05504ec6e42f68076b30eb4b18886": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "3ec27f6538164750bccae7ebfe16195f": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "42e53d3824924c04a745a1a8981a13b3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "46c44695f19d4ef3a9a278af73e8c1c7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_b8c01af04b7b4aff941ac2c10b58ec4f",
        "IPY_MODEL_b7dd6b452c874a4f8bc10a22ee07b4ff",
        "IPY_MODEL_cd31737b2cb64f419482b78dcaa09b63"
       ],
       "layout": "IPY_MODEL_7c017fb4ec9e4a619b2c517089737479"
      }
     },
     "475bd4cea0a64d0ebadd450e573e87e6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_e553154271b0475fb588c04c804922bc",
       "max": 2201.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_6cb1cd8ed2044d4aacbad48f5df60da0",
       "value": 2201.0
      }
     },
     "4ce1f8a2cc4f4e26ad91360b9e3dc7fb": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "4d585d66e033418ab175e257a8ba6745": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "50e04038b24d4119bb68b956fe9232bd": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "53e488df36af4e2aa385348416087f40": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_a080fa27a9ff4b35b4f1166fde46eeaa",
       "placeholder": "​",
       "style": "IPY_MODEL_62fa1cd2c86543b19cddf64384a0ddb3",
       "value": "generation_config.json: 100%"
      }
     },
     "59335a00ae81452c9b537abc98c49cc7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_fad2b5d001fd4d1b972cf5f6836042a8",
       "placeholder": "​",
       "style": "IPY_MODEL_78ba0a1824b04e4290c88fe5280e0248",
       "value": "special_tokens_map.json: 100%"
      }
     },
     "62fa1cd2c86543b19cddf64384a0ddb3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "65b77d53dcc9496c936296d0e20d1bca": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_59335a00ae81452c9b537abc98c49cc7",
        "IPY_MODEL_475bd4cea0a64d0ebadd450e573e87e6",
        "IPY_MODEL_9888c5de333043668625960ee8178e1d"
       ],
       "layout": "IPY_MODEL_e3b58f5fdf024b1c8e646af003f2fd84"
      }
     },
     "6adca295308646058b8250918d8d0299": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_3ea05504ec6e42f68076b30eb4b18886",
       "placeholder": "​",
       "style": "IPY_MODEL_b0bf4009af23471d99103ed0f5e4201c",
       "value": "model.safetensors: 100%"
      }
     },
     "6cb1cd8ed2044d4aacbad48f5df60da0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "6d7a23d4f10c48168a732edb6eb7eb03": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "6ef77ffc48b84031bb1b991029000808": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_53e488df36af4e2aa385348416087f40",
        "IPY_MODEL_c2478128a8d047469fa66b753f8dfa61",
        "IPY_MODEL_eb9f81bffabd4a99b2209c739354c9f9"
       ],
       "layout": "IPY_MODEL_06c4762615ee4d60b00d031da0374c37"
      }
     },
     "72c80d3b5dfc4d049cb6d780b938fd9b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_d6e89db086ae4736a9b57d6ed1818365",
       "placeholder": "​",
       "style": "IPY_MODEL_0dc16a80f3ee4e969cfb8d4d3a6a7821",
       "value": "config.json: 100%"
      }
     },
     "74fe7cbaf650413483f079e6348ed5a7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "774708c5a5854628a8ddcbb4b770b47b": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "78ba0a1824b04e4290c88fe5280e0248": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "7a509c5c23a948218b2ac854dcf2078c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_6d7a23d4f10c48168a732edb6eb7eb03",
       "placeholder": "​",
       "style": "IPY_MODEL_afde2ccf437f45cab4205edd33d757c8",
       "value": "spiece.model: 100%"
      }
     },
     "7a6249317fee40188379284894fdb61f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_c3034816dc7a4f60a44a3b8c6dab465f",
        "IPY_MODEL_be0d712b355240699046eed2c4f8e8b3",
        "IPY_MODEL_07f277d413ca441fb8246b8bf08196e5"
       ],
       "layout": "IPY_MODEL_880986dfb6fa4f4384b8825f2301d2f1"
      }
     },
     "7c017fb4ec9e4a619b2c517089737479": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "7ef81c54cf384fed86ffc942acac5490": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_95ded459a8d843fc9cca4e09d0c720ac",
        "IPY_MODEL_2f165eba5bb349b8a8837c3e7a81b662",
        "IPY_MODEL_de58b24306a94b2f8b892c1a56a819f7"
       ],
       "layout": "IPY_MODEL_05ce910b4973402fa14c6962e5933582"
      }
     },
     "7fe4f57c3cf8412cbf4914641fff0b30": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "8228c1b7521d42518a59893b39fb737e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "827ac70993e246f5a9fa05442acd3916": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_83c30a8193794b88a79bc1c94a2447d6",
       "max": 950.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_e05ee1ffcd4944328c717b3365377f22",
       "value": 950.0
      }
     },
     "83c30a8193794b88a79bc1c94a2447d6": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "880986dfb6fa4f4384b8825f2301d2f1": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "90361f9ac86f44c0b9c15c5a9058a038": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "95ded459a8d843fc9cca4e09d0c720ac": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_1bafcc0daa60431380b56dcbc8b6926c",
       "placeholder": "​",
       "style": "IPY_MODEL_359b3197160b47969ccb0519f5c946fc",
       "value": "tokenizer_config.json: 100%"
      }
     },
     "985aeda5ab3d4631869f9e684ab3270a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_b23edab1ea614476a76f23723c1255af",
       "max": 791656.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_1171ece49f284ee48997bcfcd73f5a5c",
       "value": 791656.0
      }
     },
     "9888c5de333043668625960ee8178e1d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_b62b90bc4ed244e3b6335ab97632b894",
       "placeholder": "​",
       "style": "IPY_MODEL_f16d5c7699b94c8fb9c5788ff4402bf9",
       "value": " 2.20k/2.20k [00:00&lt;00:00, 183kB/s]"
      }
     },
     "9a3ecf3ce5ae473bbbe3206105b21c84": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "9d717ae28e744494a637e59d179a1c0f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_72c80d3b5dfc4d049cb6d780b938fd9b",
        "IPY_MODEL_286f99a668714a029bb79cf17dccf3ba",
        "IPY_MODEL_d2fe80c2d0ed46a689a3444239dd37f3"
       ],
       "layout": "IPY_MODEL_4ce1f8a2cc4f4e26ad91360b9e3dc7fb"
      }
     },
     "9f6b300be0974aa5aec10cb72f65a26a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "9fb61e62813d4ddda1d832e48049da4c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "a080fa27a9ff4b35b4f1166fde46eeaa": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "a44ad168922646ebb1d62448577feec9": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "aaf6fa0dd99442c2a683d1c075872139": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_cff200ec4f634db9a73dc3a7b84b08ab",
        "IPY_MODEL_827ac70993e246f5a9fa05442acd3916",
        "IPY_MODEL_e04fed5a22ba462794cf0c3b4ed3759f"
       ],
       "layout": "IPY_MODEL_19b4b5e1b48e4a3da7eaab555cb0063c"
      }
     },
     "af11adb6477b405ca6f66615a6535769": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "afde2ccf437f45cab4205edd33d757c8": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "b0bf4009af23471d99103ed0f5e4201c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "b23edab1ea614476a76f23723c1255af": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "b2b9c474330241c3b39071bd45ef8567": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_7a509c5c23a948218b2ac854dcf2078c",
        "IPY_MODEL_985aeda5ab3d4631869f9e684ab3270a",
        "IPY_MODEL_f4a91f045e3d40509815807f87ac702a"
       ],
       "layout": "IPY_MODEL_cf6968e859a048c2ad70c94115a6d4b6"
      }
     },
     "b62b90bc4ed244e3b6335ab97632b894": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "b7dd6b452c874a4f8bc10a22ee07b4ff": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_4d585d66e033418ab175e257a8ba6745",
       "max": 50.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_cd0fccdc4c3f45fa857f6a033809b87e",
       "value": 50.0
      }
     },
     "b8c01af04b7b4aff941ac2c10b58ec4f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_9fb61e62813d4ddda1d832e48049da4c",
       "placeholder": "​",
       "style": "IPY_MODEL_8228c1b7521d42518a59893b39fb737e",
       "value": "Map: 100%"
      }
     },
     "be0d712b355240699046eed2c4f8e8b3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_daa28d3a15f748619f86c78ad4950cb6",
       "max": 2424064.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_af11adb6477b405ca6f66615a6535769",
       "value": 2424064.0
      }
     },
     "c09a196451774ffe9f2b4e60ec69b3e4": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "c2478128a8d047469fa66b753f8dfa61": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_26bbe9b5f98447b7b3a79429993019dd",
       "max": 147.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_136a4fc461a145f18f7e266d38904971",
       "value": 147.0
      }
     },
     "c3034816dc7a4f60a44a3b8c6dab465f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_167cded3f0934ef1a1ef2298c2221d37",
       "placeholder": "​",
       "style": "IPY_MODEL_00889bbae8a74e63bc84e9df59ce6958",
       "value": "tokenizer.json: 100%"
      }
     },
     "c34beca2bccb4dceaec86d71d4c8a8b2": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "cd0fccdc4c3f45fa857f6a033809b87e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "cd31737b2cb64f419482b78dcaa09b63": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_c09a196451774ffe9f2b4e60ec69b3e4",
       "placeholder": "​",
       "style": "IPY_MODEL_1a8d196ec33048be95dde89554000b23",
       "value": " 50/50 [00:00&lt;00:00, 230.07 examples/s]"
      }
     },
     "cd83106a49ad414297e0ccc20a5794a3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "cf446b9362ee449faf7434c9e66c2fbd": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "cf6968e859a048c2ad70c94115a6d4b6": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "cff200ec4f634db9a73dc3a7b84b08ab": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_1d34de4825334e208338b6753445e2c9",
       "placeholder": "​",
       "style": "IPY_MODEL_9f6b300be0974aa5aec10cb72f65a26a",
       "value": "Map: 100%"
      }
     },
     "d2fe80c2d0ed46a689a3444239dd37f3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_cf446b9362ee449faf7434c9e66c2fbd",
       "placeholder": "​",
       "style": "IPY_MODEL_332e53894ce44288b3e2c7c8bbddccd4",
       "value": " 1.40k/1.40k [00:00&lt;00:00, 118kB/s]"
      }
     },
     "d6e89db086ae4736a9b57d6ed1818365": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "d826c3a3b27a49f581529522dc64c7c8": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "d83b7dac3988415aaf3c8906fd24d8df": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "d9ea35476db5480d882923827170c443": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "daa28d3a15f748619f86c78ad4950cb6": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "de58b24306a94b2f8b892c1a56a819f7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_216182efc8a34c00bcdda669d298df50",
       "placeholder": "​",
       "style": "IPY_MODEL_d83b7dac3988415aaf3c8906fd24d8df",
       "value": " 2.54k/2.54k [00:00&lt;00:00, 172kB/s]"
      }
     },
     "e04fed5a22ba462794cf0c3b4ed3759f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_a44ad168922646ebb1d62448577feec9",
       "placeholder": "​",
       "style": "IPY_MODEL_7fe4f57c3cf8412cbf4914641fff0b30",
       "value": " 950/950 [00:02&lt;00:00, 334.97 examples/s]"
      }
     },
     "e05ee1ffcd4944328c717b3365377f22": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "e190b7a02db841b9a76585e166672d21": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "e3b58f5fdf024b1c8e646af003f2fd84": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "e553154271b0475fb588c04c804922bc": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "eb9f81bffabd4a99b2209c739354c9f9": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_140735f4c14547aa90bc3797a2f0770e",
       "placeholder": "​",
       "style": "IPY_MODEL_cd83106a49ad414297e0ccc20a5794a3",
       "value": " 147/147 [00:00&lt;00:00, 8.70kB/s]"
      }
     },
     "f16d5c7699b94c8fb9c5788ff4402bf9": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "f1d04447cd814acfabedc65738cd52fa": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_6adca295308646058b8250918d8d0299",
        "IPY_MODEL_24652d5d9ea54537a91f7747605c0369",
        "IPY_MODEL_082204222c7248e499c65ba646c426db"
       ],
       "layout": "IPY_MODEL_90361f9ac86f44c0b9c15c5a9058a038"
      }
     },
     "f2d3c2984b104a6db05743d5e8e18b62": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "f4a91f045e3d40509815807f87ac702a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_3ec27f6538164750bccae7ebfe16195f",
       "placeholder": "​",
       "style": "IPY_MODEL_f2d3c2984b104a6db05743d5e8e18b62",
       "value": " 792k/792k [00:00&lt;00:00, 7.63MB/s]"
      }
     },
     "fad2b5d001fd4d1b972cf5f6836042a8": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
